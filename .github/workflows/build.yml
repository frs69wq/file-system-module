name: Build-Linux

on:
  push:
    paths-ignore:
      - 'doc/**'
      - '**.md'
      - '**.rst'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      - name: Install prereqs
        run: |
          sudo apt-get update
          sudo apt-get install -y libgraphviz-dev libboost-all-dev
      - name: Install SimGrid
        run: |
          git clone https://framagit.org/simgrid/simgrid.git
          cd simgrid
          git checkout e3bfee0abad43d0b16c84b093b8c4d921fa91ddf
          mkdir build
          cd build
          cmake ..
          make -j4
          sudo make install

      - name: Install Google Tests
        run: |
          wget https://github.com/google/googletest/archive/refs/tags/release-1.11.0.tar.gz
          tar xf release-1.11.0.tar.gz
          cd googletest-release-1.11.0
          cmake .
          make -j4
          sudo make install

      - name: Install lcov
        run: |
          sudo apt-get -y install lcov

      - name: Run tests, compute coverage
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: |
          git clone https://github.com/frs69wq/file-system-module.git
          cd file-system-module
          mkdir build
          cd build
          cmake ..
	  make -j4 examples
	  ./open_seek_write
          make -j4 unit_tests
          ./unit_tests
          lcov --directory . --capture --output-file coverage.info
          lcov --remove coverage.info '*/test/*' '*/examples/*' '*/include/*'
          bash <(curl -s https://codecov.io/bash) -f coverage.info -t ${CODECOV_TOKEN}


          #        with:
          #token: ${{ secrets.CODECOV_TOKEN }}
          #verbose: true
#         directory: ./coverage/reports/
#         env_vars: OS,PYTHON
#         fail_ci_if_error: true
#         files: ./coverage1.xml,./coverage2.xml,!./cache
#         flags: unit_tests
#         name: codecov-umbrella

      - name: Install Doxygen and Sphinx
        run: |
          sudo apt-get -y install doxygen
          sudo apt-get -y install python3-sphinx
          pip install sphinx_rtd_theme
          pip install recommonmark
          pip install breathe

      - name: Build and Deploy Documentation
        env:
          TOKEN_GITHUB: ${{ secrets.TOKEN_GITHUB }}
        run: |
          #git clone https://github.com/frs69wq/file-system-module.git
          echo "Building documentation..."
          cd file-system-module/build
          pwd
          cmake ..
          make doc
          mkdir $HOME/gh-pages-to-deploy
          cp -r ./docs/latest/* $HOME/gh-pages-to-deploy/
          cd ../..
          echo "Updating gh-pages branch..."
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git clone --quiet --branch=gh-pages https://${TOKEN_GITHUB}@github.com/henricasanova/file-system-module.git gh-pages > /dev/null
          cd gh-pages
          cp -Rf $HOME/gh-pages-to-deploy/* .
          touch .nojekyll
          git add -f .
          git diff-index --quiet HEAD || git commit -m "GitHub build $GITHUB_RUN_NUMBER"
          git push -fq origin gh-pages > /dev/null
          echo "Done updating gh-pages!"

         




          



